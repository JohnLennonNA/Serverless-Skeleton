{
  "_from": "serverless-plugin-simulate",
  "_id": "serverless-plugin-simulate@0.0.17",
  "_inBundle": false,
  "_integrity": "sha1-uydI3KU60httdHCNAZnX0NpP4b8=",
  "_location": "/serverless-plugin-simulate",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "serverless-plugin-simulate",
    "fetchSpec": "latest",
    "name": "serverless-plugin-simulate",
    "raw": "serverless-plugin-simulate",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/serverless-plugin-simulate/-/serverless-plugin-simulate-0.0.17.tgz",
  "_shasum": "bb2748dca53ad21b6d74708d0199d7d0da4fe1bf",
  "_spec": "serverless-plugin-simulate",
  "_where": "/app",
  "author": {
    "email": "gertjvr@gmail.com",
    "name": "Gert JvR",
    "url": "https://github.com/gertjvr"
  },
  "bugs": {
    "url": "https://github.com/serverless-community-labs/serverless-plugin-simulate/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Gert JvR",
      "email": "gertjvr@gmail.com",
      "url": "https://github.com/gertjvr"
    },
    {
      "name": "John McKim",
      "email": "contact@johncmckim.me",
      "url": "http://johncmckim.me/"
    }
  ],
  "dependencies": {
    "bluebird": "^3.4.6",
    "body-parser": "^1.15.2",
    "cors": "^2.8.1",
    "docker-lambda": "^0.9.1",
    "express": "^4.14.0",
    "ip": "^1.1.4",
    "js-string-escape": "^1.0.1",
    "jsonpath": "^0.2.10",
    "lodash.isplainobject": "^4.0.6",
    "lowdb": "^0.15.4",
    "morgan": "^1.8.0",
    "request-promise": "^4.1.1",
    "type-is": "^1.6.14",
    "velocityjs": "^0.9.0"
  },
  "deprecated": false,
  "description": "This is a proof of concept to see if we can replicate Amazon API Gateway using docker images to run lambda",
  "devDependencies": {
    "coveralls": "^2.11.14",
    "eslint": "^3.8.1",
    "eslint-config-airbnb": "^10.0.1",
    "eslint-config-airbnb-base": "^5.0.2",
    "eslint-plugin-import": "^1.13.0",
    "eslint-plugin-jsx-a11y": "^2.1.0",
    "eslint-plugin-react": "^6.1.1",
    "jest": "^19.0.2",
    "serverless": "^1.0.3"
  },
  "homepage": "https://github.com/serverless-community-labs/serverless-plugin-simulate",
  "keywords": [
    "API Gateway",
    "AWS",
    "Amazon Web Services",
    "Docker",
    "Lambda",
    "Serverless"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "serverless-plugin-simulate",
  "optionalDependencies": {},
  "readme": "# Serverless simulation plugin\n\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![Build Status](https://travis-ci.org/serverless-community-labs/serverless-plugin-simulate.svg?branch=master)](https://travis-ci.org/gertjvr/serverless-plugin-simulate)\n[![npm version](https://badge.fury.io/js/serverless-plugin-simulate.svg)](https://badge.fury.io/js/serverless-plugin-simulate)\n[![Coverage Status](https://coveralls.io/repos/github/serverless-community-labs/serverless-plugin-simulate/badge.svg?branch=master)](https://coveralls.io/github/serverless-community-labs/serverless-plugin-simulate?branch=master)\n[![dependencies](https://img.shields.io/david/serverless-community-labs/serverless-plugin-simulate.svg)](https://www.npmjs.com/package/serverless-plugin-simulate)\n[![license](https://img.shields.io/npm/l/serverless-plugin-simulate.svg)](https://www.npmjs.com/package/serverless-plugin-simulate)\n\nThis is a proof of concept to see if we can replicate Amazon API Gateway using docker images to run lambda\n\n### Features:\n\n- Î» runtimes **supported** _by docker-lambda._\n- CORS\n- Authorizer\n  - Custom Authorizer **supported**\n  - Coginito Authorizer **not implemented yet**\n- Lambda Integration\n  - _Velocity templates support._ **supported**\n- Lambda Proxy Integration. **supported**\n\n## Prerequisite\n- docker - https://docs.docker.com/engine/installation/\n\n## Getting Started\nInstall the plugin\n```\nnpm i --save-dev serverless-plugin-simulate\n```\n\nConfigure your service to use the plugin\n\n```yaml\nservice: my-service\nprovider:\n  name: aws\n  runtime: nodejs4.3 # python2.7 is also supported\n\n# this is optional configurations\n# servicesPathDest is use for the case u want to compile all your src and out\n# put to another folder like dist\n#\n# services allows specifying a docker-compose.yml file and (optional)\n# projectName. This will start the docker-compose stack when simulate is run.\n# If projectName is specified, it will be used when running docker-compose,\n# and the default docker-compose network will be passed to lambda docker commands\n# allowing all lambdas to access any hosts defined in docker-compose services\ncustom:\n  simulate:\n    dist: dist\n    services:\n      file: docker-compose.yml\n      # will use: $ docker-compose --project-name myproject ...\n      # and:      $ docker --network myproject_default ...\n      projectName: myproject\n\nplugins:\n  - serverless-plugin-simulate\n```\n\nIf you do not need to chain functions locally\nyou can just run the API Gateway simulation by itself.\n```\nsls simulate apigateway -p 5000\n```\n\n### Using the Lambda simulator\nIf you want to chain functions locally, you need to use\nthe Lambda Simulator.\n\nRun the Lambda Simulation\n```\nsls simulate lambda -p 4000\n```\n\nRun the API Gateway Simulation\n```\nsls simulate apigateway -p 5000 --lambda-port 4000\n```\n\nUse the environment variables to configure the AWS SDK\nto use the local Lambda simulation. You can use the same\ntechnique with any other AWS SDK.\n\n```js\nconst AWS = require('aws-sdk');\n\nconst endpoint = process.env.SERVERLESS_SIMULATE ?\n  process.env.SERVERLESS_SIMULATE_LAMBDA_ENDPOINT :\n  undefined\n\nconst lambda = new AWS.Lambda({ endpoint })\nconst handler = (event, context, callback) => {\n  const params = {\n    FunctionName: 'my-other-function',\n    Payload: JSON.stringify({ foo: 'bar' })\n  }\n  lambda.invoke(params, (err, result) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, {\n      statusCode: 200,\n      body: result.Payload\n    })\n  })\n}\n```\n\n## Examples\n\nSee the [examples folder](https://github.com/gertjvr/serverless-plugin-simulate/tree/master/examples)\nfor examples.\n\n- `npm install` - Installs all dependencies\n- `npm start` - Starts API Gateway simulation listening at http://localhost:5000\n- `npm run start:lambda` - Starts Lambda simulation listening at http://localhost:4000\n- `npm run start:apigateway` - Starts API Gateway simulation that uses the Lambda\nsimulation listening at http://localhost:5000\n- `npm run start:services` - Starts mock services defined in `docker-compose.yml`\n- `npm test` - tests custom authorizer (Authorization:TOKEN 12345)\n\n## Authors\n\n* **Gert JvR** - *Initial work* - [gertjvr](https://github.com/gertjvr)\n* **John McKim** - [johncmckim](https://github.com/johncmckim)\n\nSee also the list of [contributors](https://github.com/serverless-community-labs/serverless-plugin-simulate/contributors) who participated in this project.\n\n## Contributing\nPlease create an issue before submitting an Pull Request.\n\n## Acknowledgements\nThis would not be possible without [lambci](http://lambci.org/)\n- [docker-lambda](https://github.com/lambci/docker-lambda) - Docker images and test runners that replicate the live AWS Lambda environment\n\n[@johncmckim](https://github.com/johncmckim) for suggesting the idea\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/serverless-community-labs/serverless-plugin-simulate.git"
  },
  "scripts": {
    "lint": "eslint .",
    "lint-fix": "eslint . --fix",
    "test": "jest",
    "test:cover": "jest --coverage",
    "test:watch": "jest --watch"
  },
  "version": "0.0.17"
}
